pipeline{
    agent any
    tools{
        maven "maven"
    }
    environment{
            def pipelineA = 'k8sDeployment'
            //def buildNumber = '100'
    }
        stages{
            stage ('SCM checkout'){
                steps{ 
                    cleanWs()
                    git branch: 'Devops', url: 'https://github.com/comrider/springboot-app.git'
                }
            }
            stage("build & SonarQube analysis"){
                steps{
                    withSonarQubeEnv('sonarqube') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
            stage("Quality Gate") {
                steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
                }
            }
            stage('unit test'){
                steps{
                    sh 'mvn test'
                }
            }
            stage('integration test'){
                steps {
                    sh 'mvn verify  -DskipUnitTests'
                }
            }
            stage('code analysis with checkstyle'){
                steps{
                    sh 'mvn checkstyle:checkstyle'
                }
                post {
                    success{
                        echo "Generated Analysis Result"
                    }
                }
            }
            stage("Maven Packaging"){
                steps{
                sh 'mvn package'
                }
            }
            stage("Build Image") {
                steps{
                    echo 'building docker image '
                    sh 'docker build -t 18.188.220.54:8083/maven-app:$BUILD_NUMBER .'
                    echo 'doker login '
                }
            }
            stage('Pushing the image to Nexus'){
                steps{
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
                        sh '''
                            docker login -u admin -p $password 18.188.220.54:8083
                            docker push 18.188.220.54:8083/maven-app:$BUILD_NUMBER
                            docker rmi 18.188.220.54:8083/maven-app:$BUILD_NUMBER
                        '''
                    }
                }
            }
            stage('Building Helm artifact, versioning it and pushing it in to Nexus'){
                steps{
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
                        sh '''
                            chmod 777 helm
                            tar -czvf test.tgz helm/
                            ls -lsh
                            tar -tvf test.tgz
                            helmVersion=$(helm show chart ./helm/helmchart | grep version: | cut -d ":" -f2 | tr -d " ")
                            tar -czvf myapp-${helmVersion}.tgz helm/
                            ls -lsh
                            tar xvf myapp-${helmVersion}.tgz
                            curl -u admin:$password http://18.188.220.54:8081/repository/helm-hosted/ --upload-file myapp-${helmVersion}.tgz -v
                        '''
                    }
                }
            }
            stage('triggering the Downstream job for Deploying'){
                steps{
                    // Use the build step to invoke pipeline A asynchronously//
                    build job: "${env.pipelineA}", parameters: [string(name: 'BUILD_NUMBER_', value: "${BUILD_NUMBER}")], wait: false
                }
            }
        }
    }
