pipeline{
    agent any
    tools{
        maven "maven"
    }
    environment{
            registry = "public.ecr.aws/z2t0b6v5/spring-boot:$BUILD_NUMBER"
            def pipelineA = 'k8sDeployment'
            def APPVERSION = ''
    }
        stages{
            stage ('SCM checkout'){
                steps{ 
                    cleanWs()
                    git branch: 'Devops', url: 'https://github.com/comrider/springboot-app.git'
                }
            }
            stage("build & SonarQube analysis"){
                steps{
                    withSonarQubeEnv('sonarqube') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
            stage("Quality Gate") {
                steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
                }
            }
            stage('unit test'){
                steps{
                    sh 'mvn test'
                }
            }
            stage('integration test'){
                steps {
                    sh 'mvn verify  -DskipUnitTests'
                }
            }
            stage('code analysis with checkstyle'){
                steps{
                    sh 'mvn checkstyle:checkstyle'
                }
                post {
                    success{
                        echo "Generated Analysis Result"
                    }
                }
            }
            stage("Maven Packaging"){
                steps{
                sh 'mvn package'
                }
            }
            // stage("Build Image for nexus") {
            //     steps{
            //         echo 'building docker image '
            //         sh 'docker build -t 18.188.220.54:8083/maven-app:$BUILD_NUMBER .'
            //         echo 'doker login '
            //     }
            // }
            stage("Building image for ECR"){
                steps{
                    script{
                        docker.build registry
                    }
                }
            }
            // stage('Pushing the image to Nexus'){
            //     steps{
            //         withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
            //             sh '''
            //                 docker login -u admin -p $password 18.188.220.54:8083
            //                 docker push 18.188.220.54:8083/maven-app:$BUILD_NUMBER
            //                 docker rmi 18.188.220.54:8083/maven-app:$BUILD_NUMBER
            //             '''
            //         }
            //     }
            // }
            stage("pushing image to ecr"){
                steps{
                    sh '''
                        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/z2t0b6v5
                        docker push public.ecr.aws/z2t0b6v5/spring-boot:$BUILD_NUMBER
                    '''
                }
            }
            // stage('Building Helm artifact, versioning it and pushing it in to Nexus'){
            //     steps{
            //         withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
            //         sh '''
            //             helm package helm/helmchart
            //             curl -u admin:$password http://18.188.220.54:8081/repository/helm-repo/ --upload-file helmchart-1-0.1.0.tgz -v
            //         '''
            //             // sh '''
            //             //     chmod 777 helm
            //             //     tar -czvf test.tgz helm/
            //             //     tar -tvf test.tgz
            //             //     helmVersion=$(helm show chart ./helm/helmchart | grep version: | cut -d ":" -f2 | tr -d " ")
            //             //     tar -czvf myapp-${helmVersion}.tgz helm/
            //             //     ls -lsh
            //             //     tar xvf myapp-${helmVersion}.tgz
            //             //     curl -u admin:$password http://18.188.220.54:8081/repository/helm-repo/ --upload-file myapp-${helmVersion}.tgz -v
            //             // '''
            //         }
            //     }
            // }
            stage('Versioning and building nexus artifact, pusing it into ECR'){
                steps{
                    sh '''
                        sed -i "s/version:.*/version: $BUILD_NUMBER/" helm/helmcharts/Chart.yaml
                        helm package helm/helmcharts
                    '''
                    // helm push helmchart-1-$BUILD_NUMBER.tgz oci://public.ecr.aws/z2t0b6v5/helm/
                }
            }
            stage('Pushing Helm package into ECR - Private_repo'){
                steps{
                    sh '''
                    aws ecr get-login-password \
                                --region us-east-1 | helm registry login \
                                --username AWS \
                                --password-stdin 345325264898.dkr.ecr.us-east-1.amazonaws.com
                    '''
                    sh ' helm push helmcharts-1-$BUILD_NUMBER.tgz oci://345325264898.dkr.ecr.us-east-1.amazonaws.com'

                }
            }
            // stage('Pushing Helm package into ECR'){
            //     steps{
            //         sh '''
            //             aws ecr-public get-login-password \
            //                     --region us-east-1 | helm registry login \
            //                     --username AWS \
            //                     --password-stdin public.ecr.aws/z2t0b6v5/helmchart
            //         '''
            //         sh ' helm push helmchart-1-$BUILD_NUMBER.tgz oci://public.ecr.aws/z2t0b6v5' 
            //         sh '''
            //             aws ecr-public describe-images \
            //                     --repository-name helmchart \
            //                     --region us-east-1
            //         '''
            //     }
            // }


            stage('triggering the Downstream job for Deploying'){
                steps{
                    // Use the build step to invoke pipeline A asynchronously//
                    build job: "${env.pipelineA}", parameters: [string (name: 'BUILD_NUMBER_', value: "${BUILD_NUMBER}")], wait: false
                    // build job: "${env.pipelineA}", parameters: [string(name: 'BUILD_NUMBER_', value: "${BUILD_NUMBER}"), string(name: 'APPVERSION', value: '${appVersion}')], wait: false 
                }
            }
        }
    }
