pipeline{
    agent any
    tools{
        maven "maven"
    }
    environment{
            registry = "public.ecr.aws/z2t0b6v5/spring-boot:$BUILD_NUMBER"
            def pipelineA = 'k8sDeployment'
            def APPVERSION = ''
    }
        stages{
            stage ('SCM checkout'){
                steps{ 
                    cleanWs()
                    git branch: 'Devops', url: 'https://github.com/comrider/springboot-app.git'
                }
            }
            stage("build & SonarQube analysis"){
                steps{
                    withSonarQubeEnv('sonarqube') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
            stage("Quality Gate") {
                steps {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
            stage('unit test'){
                steps{
                    sh 'mvn test'
                }
            }
            stage('integration test'){
                steps {
                    sh 'mvn verify  -DskipUnitTests'
                }
            }
            stage('code analysis with checkstyle'){
                steps{
                    sh 'mvn checkstyle:checkstyle'
                }
                post {
                    success{
                        echo "Generated Analysis Result"
                    }
                }
            }
            stage("Maven Packaging"){
                steps{
                sh 'mvn package'
                }
            }
            stage("Build Image for nexus") {
                steps{
                    echo 'building docker image '
                    sh 'docker build -t 18.188.220.54:8083/maven-app:$BUILD_NUMBER .'
                    echo 'doker login '
                }
            }
            stage('Pushing the image to Nexus'){
                steps{
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
                        sh '''
                            docker login -u admin -p $password 18.188.220.54:8083
                            docker push 18.188.220.54:8083/maven-app:$BUILD_NUMBER
                            docker rmi 18.188.220.54:8083/maven-app:$BUILD_NUMBER
                        '''
                    }
                }
            }
            stage("Building image for ECR"){
                steps{
                    script{
                        docker.build registry
                    }
                }
            }
            stage("Pushing image in to ECR"){
                steps{
                    sh '''
                        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/z2t0b6v5
                        docker push public.ecr.aws/z2t0b6v5/spring-boot:$BUILD_NUMBER
                    '''
                }
            }
            stage('Building Helm Chart, versioning it and pushing it in to Nexus'){
                steps{
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
                        sh '''
                            cat ./helm/helmcharts/Chart.yaml
                            sed -i 's/version:*/version: $BUILD_NUMBER/' ./helm/helmcharts/Chart.yaml
                            helm package helm/helmcharts
                            curl -u admin:$password http://18.188.220.54:8081/repository/helm-repo/ --upload-file myapp-${helmVersion}.tgz -v
                        '''
                    }
                }
            }
            stage('Versioning and building Helm Chart, pusing it into ECR'){
                steps{
                    sh '''
                        cat ./helm/helmcharts/Chart.yaml
                        sed -i 's/version:*/version: $BUILD_NUMBER/ ' ./helm/helmcharts/Chart.yaml
                        helm package helm/helmcharts
                        ls -lrt
                    '''                   
                }
            }
                // stage('Pushing Helm package into ECR - Private_repo'){
                //     steps{
                //         sh '''
                //         aws ecr get-login-password 
                //                     --region us-east-1 | helm registry login \
                //                     --username AWS \
                //                     --password-stdin 345325264898.dkr.ecr.us-east-1.amazonaws.com
                //         '''
                //         // sh ' helm push helmcharts-$BUILD_NUMBER.tgz oci://345325264898.dkr.ecr.us-east-1.amazonaws.com'
                //           sh ' helm push helmcharts*.tgz oci://345325264898.dkr.ecr.us-east-1.amazonaws.com/helmcharts'
                        

                //     }
                // }
                                // stage('Pushing Helm package into ECR'){
                                //     steps{
                                //         sh '''
                                //             aws ecr-public get-login-password \
                                //                     --region us-east-1 | helm registry login \
                                //                     --username AWS \
                                //                     --password-stdin public.ecr.aws/z2t0b6v5/helmchart
                                //         '''
                                //         sh ' helm push helmchart-1-$BUILD_NUMBER.tgz oci://public.ecr.aws/z2t0b6v5' 
                                //         sh '''
                                //             aws ecr-public describe-images \
                                //                     --repository-name helmchart \
                                //                     --region us-east-1
                                //         '''
                                //     }
                                // }


            stage('triggering the Downstream job for Deploying'){
                steps{
                    // Use the build step to invoke pipeline A asynchronously//
                    build job: "${env.pipelineA}", parameters: [string (name: 'BUILD_NUMBER_', value: "${BUILD_NUMBER}")], wait: false
                }
            }
        }
    }
