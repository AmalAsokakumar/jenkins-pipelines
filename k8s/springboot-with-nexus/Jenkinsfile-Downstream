pipeline {
    agent any
    parameters {
        string(name: 'BUILD_NUMBER_', defaultValue: '', description: 'To version the docker image')
    }
    stages {
        stage('Pulling the Artifact for Nexus') {
            steps {
                cleanWs()
                echo "Build number: $params.BUILD_NUMBER_"
                echo "Helm version: $params.APPVERSION"
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'password')]) {
                        sh '''
                            docker login -u admin -p $password 18.188.220.54:8083
                            curl -u admin:$password -o helmchart http://18.188.220.54:8081/repository/helm-hosted/helmchart-1-0.1.0.tgz
                        '''
                        //  docker pull 18.188.220.54:8083/maven-app:$BUILD_NUMBER_  //to pull file form the nexus repo
                    }
            }
        }
        stage("pulling the artifact from ECR"){
            steps{
                // this stage is not used 
                sh '''
                docker pull aws_account_id.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest
                ''' 
            }
        }
        stage('Extracting the files'){
            steps{
                sh '''
                    tar tvf helmchart.tgz
                    tar xvf helmchart.tgz
                    helm template -f helmchart/value.yaml  helmchart
                    helm lint -f helmchart/value.yaml  helmchart 
                    helm install -f helmchart/value.yaml  helmchart --debug
                '''
            }
        }
        stage ('deploying the spring boot application in k8s'){
            steps{
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'istio-secret-file', namespace: '', serverUrl: '') {
                    sh 'helm install myrelease -f helmchart/value.yaml  helmchart'
                }
            }
        }
    }
}